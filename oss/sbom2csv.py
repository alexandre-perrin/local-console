#!/usr/bin/env python
"""
This script converts the SBOM file generated by cyclonedx-py into csv format.
"""
import argparse
import csv
import json


def get_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--input", required=True, nargs="+", help="List of paths to SBOM"
    )
    parser.add_argument(
        "--output", required=True, help="Path to store the generated CSV output."
    )
    return parser.parse_args()


def transfer_components(dst: dict, src: dict) -> None:
    components = {component["bom-ref"]: component for component in dst["components"]}

    for component in src["components"]:
        if component["bom-ref"] not in components:
            dst["components"].append(component)
            print(f"Package {component['bom-ref']} was missing. Added to the list.")
        else:
            original_component = components[component["bom-ref"]]
            for attribute in component.keys():
                if attribute == "bom-ref":
                    continue
                original_attribute = original_component.get(attribute, [])
                original_attribute.extend(component[attribute])
                original_component[attribute] = original_attribute


def fill_name_and_version(data: dict) -> None:
    for component in data["components"]:
        name, version = component["bom-ref"].split("==")
        component["name"] = name
        component["version"] = version


def extract_licenses(name: str, licenses: dict) -> str:
    ret = []
    for lic in licenses:
        if "license" in lic:
            lic = lic["license"]
            if "id" in lic:
                ret.append(lic["id"])
            elif "name" in lic:
                ret.append(lic["name"])
            else:
                raise Exception(f"Unknown format: {lic}")
        elif "expression" in lic:
            ret.append(lic["expression"])
        else:
            raise Exception(f"Unknown format: {lic}")
    if not ret:
        raise Exception(f"Dependency {name} does not contain license information!")

    return " ".join(ret)


def extract_websites(external_references: dict) -> str:
    return " ".join(
        [
            ref["url"]
            for ref in external_references
            if ref["type"] in ("website", "license")
        ]
    )


def main() -> None:
    args = get_args()

    with open(args.input[0]) as f:
        sbom = json.load(f)

    for sbom_path in args.input[1:]:
        with open(sbom_path) as f:
            transfer_components(sbom, json.load(f))

    fill_name_and_version(sbom)

    with open(args.output, "w", newline="") as data_file:
        csv_writer = csv.writer(data_file, delimiter=",")
        csv_writer.writerow(["name", "version", "license", "website"])

        for component in sbom["components"]:
            # ignore self-reference
            if component["name"] == "local-console":
                continue

            licenses = extract_licenses(
                component["name"], component.get("licenses", {})
            )
            websites = extract_websites(component.get("externalReferences", []))

            row = [component["name"], component["version"], licenses, websites]
            row = [elem.replace(",", "").replace(";", "") for elem in row]
            csv_writer.writerow(row)


if __name__ == "__main__":
    main()
