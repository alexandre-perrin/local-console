---
name: CI

on:
  pull_request:
  workflow_dispatch:
  push:
    branches: [main]

env:
  PYTHON_VERSION: '3.11'

jobs:
  wheel:
    name: Build python wheel
    runs-on: [self-hosted, X64]
    container: ubuntu:22.04
    timeout-minutes: 7
    env:
      ARTIFACT_NAME: python-wheel
    outputs:
      artifact: ${{ env.ARTIFACT_NAME }}
    steps:
    - name: Install system requirements
      run: |
        apt-get -y update && \
        apt install -y gcc python3-dev make cmake \
                       software-properties-common git

    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      id: py
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Create unprivileged user
      # Building the python wheel as root was not working
      # as expected, with setuptools-scm failing to detect
      # the git repo, and hence not including important files
      # Hence, we need an unprivileged user
      run: useradd -m testbot

    - name: Checkout
      uses: actions/checkout@v4
      with:
        path: "repo"
        # Shallow checkouts were not conducive to setuptools-scm
        # detecting the git repository with its objects.
        fetch-depth: 0

    - name: Post-checkout chown and move
      run: |
        mv repo ~testbot/
        chown -R testbot ~testbot/repo

    - name: Build wheel
      run: |
        runuser -u testbot -- ${{ steps.py.outputs.python-path }} -m venv ~testbot/build_env
        runuser -u testbot -- ~testbot/build_env/bin/python -m pip install build
        runuser -u testbot -- ~testbot/build_env/bin/python -m build --wheel --outdir ~testbot/ ~testbot/repo/local-console/
        mv ~testbot/local_console-*-py3-*.whl .

    - name: Upload wheel
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        retention-days: 21
        path: local_console-*-py3-*.whl

  pre-commit:
    name: Pre-commit
    runs-on: [self-hosted, X64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Run Pre-commit
        uses: pre-commit/action@v3.0.1

  unit-tests:
    name: Unit Tests
    runs-on: [self-hosted, X64]
    container: ubuntu:22.04
    timeout-minutes: 20
    needs: [pre-commit]
    steps:
    - name: Install system requirements
      run: |
        apt-get -y update && \
        apt install -y curl gcc python3-dev make \
                       software-properties-common git \
                       xvfb libgl1-mesa-glx libxrender1 libglib2.0-0

    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      id: py
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Mock wasi-sdk
      run: |
        mkdir /opt/wasi-sdk
        touch /opt/wasi-sdk/bin

    - name: Checkout
      uses: actions/checkout@v4

    - name: Install local-console in editable mode
      # This is required in order for coverage.py
      # to be able to catch coverage data.
      run: |
        ${{ steps.py.outputs.python-path }} -m venv .venv
        . .venv/bin/activate
        pip install -e local-console/
        pip install -r tests/requirements.txt

    - name: Run Unit Test
      id: unit-test
      run: |
        . .venv/bin/activate
        xvfb-run coverage run -m pytest tests -o junit_family=xunit1 --junitxml=xunit-result.xml --hypothesis-seed=42
        coverage xml

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@v2.1.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  e2e-tests:
    name: E2E Test for ${{ matrix.ows-version }} with${{ matrix.with-tls == false && 'out' || '' }} TLS
    runs-on: [self-hosted, X64]
    container: ubuntu:22.04
    timeout-minutes: 20
    needs: [wheel, pre-commit]
    strategy:
      fail-fast: true
      matrix:
        with-tls: [true, false]
        ows-version: ["EVP1", "EVP2-TB"]
        exclude:
          # we don't need to run TLS test more than once
          - ows-version: "EVP1"
            with-tls: true
    steps:
    - name: Install system requirements
      run: |
        apt-get -y update && \
        apt install -y tree curl gcc python3-dev make \
                       software-properties-common git cmake \
                       mosquitto libnss-wrapper

    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      id: py
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Download and install agent
      run: |
        curl -sL -o wedge-agent_amd64.deb ${{ secrets.WEDGE_AGENT_SAS_URL }}
        apt install -y libc6
        apt install -y ./wedge-agent_amd64.deb
        cp /usr/bin/wedge_agent /usr/bin/evp_agent

    - name: Download install wasi-sdk
      run: |
        curl -sL https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-20/wasi-sdk-20.0-linux.tar.gz | tar zxvf - -C /tmp && \
            mv /tmp/wasi-sdk-20.0 /opt/wasi-sdk

    - name: Checkout
      uses: actions/checkout@v4

    - name: Get local-console wheel
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.wheel.outputs.artifact }}
        merge-multiple: true

    - name: Install local-console
      run: |
        ${{ steps.py.outputs.python-path }} -m venv .venv
        . .venv/bin/activate
        pip install local_console-*-py3-*.whl
        pip install -r tests/requirements.txt
        echo "::group::Installed files in virtualenv"
        tree .venv/lib/python${{ env.PYTHON_VERSION }}/site-packages/local*console*
        echo "::endgroup::"

    - name: Run E2E with${{ matrix.with-tls == false && 'out' || '' }} TLS (for ${{ matrix.ows-version }})
      id: e2e
      # It seems that mosquitto will not load a self-signed CA
      # as root, so it needs to be launched unprivileged.
      # Also, in order for the module build to succeed, the
      # samples directory must be accessible by the new user
      run: |
        useradd -m testbot
        chown -R testbot .
        . .venv/bin/activate
        runuser -u testbot -- python tests/e2e.py ${{ matrix.with-tls == true && '--with-tls' || '' }} -s ${{ matrix.ows-version }}

  windows-installer:
    name: Windows Installer
    runs-on: windows-latest
    needs: [pre-commit, wheel]
    env:
      ARTIFACT_NAME: windows-installer
    outputs:
      artifact: ${{ env.ARTIFACT_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get local-console wheel
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.wheel.outputs.artifact }}
          merge-multiple: true

      - name: Build the Inno Setup Installer
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.4
        with:
          path: ./inno-setup.iss
          options: /O+

      - name: Upload the Inno Setup Installer
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./Output/local-console-setup.exe

  verify:
    name: Verify if already published
    runs-on: [self-hosted, X64]
    if: github.ref == 'refs/heads/main'
    outputs:
      exists: ${{ steps.check-tag.outputs.exists }}
      tag: ${{ steps.tag.outputs.string }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Extract version
      id: tag
      run: |
        echo "string=v$(cat local-console/VERSION)" >> "$GITHUB_OUTPUT"
    - name: Check
      uses: mukunku/tag-exists-action@v1.6.0
      id: check-tag
      with:
        tag: ${{ steps.tag.outputs.string }}

  publish:
    name: Publish and tag
    runs-on: [self-hosted, X64]
    needs: [pre-commit, wheel, unit-tests, e2e-tests, windows-installer, verify]
    if: needs.verify.outputs.exists == 'false'
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Tag new version
      uses: tvdias/github-tagger@v0.0.2
      with:
        repo-token: ${{ secrets.TOKEN_PACKAGES }}
        tag: ${{ needs.verify.outputs.tag }}

    - name: Get local-console wheel
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.wheel.outputs.artifact }}
        merge-multiple: true

    - name: Upload to AZ
      uses: bacongobbler/azure-blob-storage-upload@main
      with:
        source_dir: '.'
        container_name: main
        connection_string: ${{ secrets.CEDATA_CONNECTION_STRING }}
        extra_args: '--pattern *.whl'
        overwrite: 'true'

    - name: Get Windows Installer
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.windows-installer.outputs.artifact }}
        merge-multiple: true

    - uses: softprops/action-gh-release@v2
      with:
        name: ${{ needs.verify.outputs.tag }}
        tag_name: ${{ needs.verify.outputs.tag }}
        generate_release_notes: true
        files: |
          local-console-setup.exe
          local_console-*-py3-*.whl
