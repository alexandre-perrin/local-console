# Copyright 2024 Sony Semiconductor Solutions Corp.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

---
name: Main tests

on:
  workflow_call:
    inputs:
      v15ref:
        required: false
        type: string
        default: t3p_v1x
        description: |
          git reference in repo SonySemiconductorSolutions/EdgeAIPF.smartcamera.type3.mirror
          to checkout for building the firmware v1.5
      fw-run-id:
        required: true
        type: string
        description: |
          Workflow run id from the Type 3 FW build job,
          used for downloading the compiled binaries artifact
      fw-artifact:
        required: true
        type: string
        description: |
          Name of the artifact compiled by the Type 3 FW build job
      lc-run-id:
        required: true
        type: string
        description: |
          Workflow run id from the build python wheel job,
          used for downloading the compiled wheel artifact
      lc-wheel-artifact:
        required: false
        type: string
        default: "python-wheel"
        description: |
          Name of the wheel artifact compiled by the build python wheel job

jobs:
  test:
    name: Test FW v1.5
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - name: Log into GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: System dependencies
      run: |
        sudo apt update && \
          sudo apt install --yes \
              tree gcc python3-dev make cmake \
              software-properties-common git mosquitto

    - name: Python | Setup
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Download install wasi-sdk 19
      run: |
        curl -sL https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-19/wasi-sdk-19.0-linux.tar.gz | tar zxvf - -C /tmp && \
            sudo mv /tmp/wasi-sdk-19.0 /opt/wasi-sdk

    - name: Get wamrc to match this wasi-sdk and camera firmware
      run: |
        docker run --rm ghcr.io/midokura/wamrc-xtensa:1.1.2 cat /opt/wamrc/bin/wamrc > wamrc
        sudo install -o root -m 0777 wamrc /usr/local/bin/

    - name: Git | Checkout our tests
      uses: actions/checkout@v4
      with:
        sparse-checkout: |
          system-tests
          samples
          sonar-project.properties

    - name: Git | Checkout AoT signing key
      uses: actions/checkout@v4
      with:
        repository: SonySemiconductorSolutions/EdgeAIPF.smartcamera.type3.mirror
        ref: ${{ inputs.v15ref }}
        token: ${{ secrets.TEMPORARY_PAT_TOKEN }}
        sparse-checkout: |
          tool/internal/swaf_tools/generate_swaf_key/sample_output/swaf_private_key_der.bin
        sparse-checkout-cone-mode: false
        path: res

    - name: Set signing key path
      id: sign-key
      run: |
        SKEY=$PWD/res/tool/internal/swaf_tools/generate_swaf_key/sample_output/swaf_private_key_der.bin
        [ -f $SKEY ] || (echo "Bad path to signing key: $SKEY"; exit 1)
        echo "path=$SKEY" >> "$GITHUB_OUTPUT"

    - name: Artifact | Download
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.lc-wheel-artifact }}
        run-id: ${{ inputs.lc-run-id }}

    - name: Python | Install Requirements
      env:
        PIP_EXTRA_INDEX_URL: ${{ secrets.AITRIOS_PIP_INDEX_URL_RO }}
      run: |
        pip install -r system-tests/requirements.txt
        pip install ./local_console-*-py3-*.whl

    - name: Artifact | Download
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.fw-artifact }}
        run-id: ${{ inputs.fw-run-id }}
        path: firmware-v1x

    - name: Determine two open ports at reverse proxy
      # The ports excluded below are hard coded in CI jobs
      # on other Midokura repositories
      id: rproxy
      run: |
        ports=$(python system-tests/ports_range.py \
                       frp.mido-tools.midokura.com \
                       8000 8099 \
                       -e 8057 -e 8058)
        echo "port-mqtt=$(echo $ports | cut -d' ' -f1)" >> "$GITHUB_OUTPUT"
        echo "port-http=$(echo $ports | cut -d' ' -f2)" >> "$GITHUB_OUTPUT"
        echo "Chosen ports: $ports"

    - name: Run tests via Pytest
      run: |
        pytest --capture=tee-sys \
        --log-cli-level=INFO --log-file-level=DEBUG \
        --log-file="pytest.log" \
        --log-cli-format="%(asctime)s %(message)s" \
        --log-file-format="%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)" \
        --log-file-date-format="%Y-%m-%d %H:%M:%S" \
        --alluredir=allure-results \
        system-tests/tests/v1 \
        --frp-host=frp.mido-tools.midokura.com \
        --frp-port-mqtt=${{ steps.rproxy.outputs.port-mqtt }} \
        --frp-port-http=${{ steps.rproxy.outputs.port-http }} \
        --frp-token=${{ secrets.FRP_TOKEN }} \
        --frp-name-suffix=local-console-${{ github.run_id }} \
        --bin-system=firmware-v1x/nuttx.bin \
        --bin-bootloader=firmware-v1x/bootloader.bin \
        --bin-partitions=firmware-v1x/partitions.bin \
        --devispare-host=https://devispare-sss.japaneast.cloudapp.azure.com/api/v1 \
        --devispare-token=${{ secrets.DEVISPARE_TOKEN }} \
        --onwire-version=evp1 \
        --certs-folder=system-tests/src/resources/mqtt-broker/certificates \
        --signing-key=${{ steps.sign-key.outputs.path }}

    - name: Artifact | Upload Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: results-interface-v1
        path: |
          results/*
          pytest.log
        overwrite: true

    - name: Artifact | Upload Allure Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: allure-results-onwire-evp1-interface-v1
        path: allure-results/*.json
        overwrite: true
        retention-days: 1

  upload-report:
    name: Allure
    uses: midokura/report-system/.github/workflows/upload-report.yaml@main
    needs: [test]
    if: always()
    with:
      artifact: allure-results-onwire-evp1-interface-v1
      allure-artifact: allure-report
      host: https://report-system.qa.midokura.com
      directory: midokura/wedge-cli
      folder: ${{ github.event.number }}
      folder-expiration: P1D
      artifact-expiration: 1
    secrets: inherit
